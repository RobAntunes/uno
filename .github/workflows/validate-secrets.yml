name: Secret Validation

on:
  workflow_dispatch:  # This allows manual triggering

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check Docker Hub Credentials
        run: |
          echo "Testing Docker Hub credentials..."
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
            echo "::error::DOCKER_HUB_USERNAME is not set!"
            exit 1
          else
            echo "✅ DOCKER_HUB_USERNAME is configured (value is masked)"
          fi
          
          if [ -z "${{ secrets.DOCKER_HUB_TOKEN }}" ]; then
            echo "::error::DOCKER_HUB_TOKEN is not set!"
            exit 1
          else
            echo "✅ DOCKER_HUB_TOKEN is configured (value is masked)"
          fi

      - name: Check AWS Credentials
        run: |
          echo "Testing AWS credentials..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "::error::AWS_ACCESS_KEY_ID is not set!"
            exit 1
          else
            echo "✅ AWS_ACCESS_KEY_ID is configured (value is masked)"
          fi
          
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "::error::AWS_SECRET_ACCESS_KEY is not set!"
            exit 1
          else
            echo "✅ AWS_SECRET_ACCESS_KEY is configured (value is masked)"
          fi

      - name: Try Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Test Docker Hub Access
        run: |
          echo "Testing Docker Hub access..."
          echo "Hello, Docker Hub!" > testfile.txt
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/test-image:latest -f - . << EOF
          FROM alpine
          COPY testfile.txt /
          CMD ["cat", "/testfile.txt"]
          EOF
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/test-image:latest
          echo "✅ Successfully pushed to Docker Hub!"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2  # Change to your region if different
      
      - name: Test AWS Access
        run: |
          echo "Testing AWS access..."
          aws sts get-caller-identity
          
          if aws eks list-clusters; then
            echo "✅ Successfully listed EKS clusters!"
          else
            echo "⚠️ Could not list EKS clusters. Check permissions."
          fi
          
          if aws ecr get-authorization-token; then
            echo "✅ Successfully authenticated with ECR!"
          else
            echo "⚠️ Could not authenticate with ECR. Check permissions."
          fi
      
      - name: Test Kubernetes Configuration
        if: ${{ success() }}
        run: |
          echo "This step would normally test Kubernetes access."
          echo "For a complete test, you would:"
          echo "1. Update kubeconfig using AWS credentials"
          echo "2. Try listing pods or deployments"
          echo "This is skipped in this validation as it requires an existing cluster."
          echo "✅ AWS credentials validated successfully!"
      
      - name: Cleanup Test Resources
        if: always()
        run: |
          echo "Cleaning up test resources..."
          # Remove test Docker image if pushed
          docker image rm ${{ secrets.DOCKER_HUB_USERNAME }}/test-image:latest || true
          # You could add additional cleanup steps here if needed