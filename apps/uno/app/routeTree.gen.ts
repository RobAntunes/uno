/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings.route'
import { Route as ServersRouteImport } from './routes/servers.route'
import { Route as ProjectRouteImport } from './routes/project.route'
import { Route as FilesRouteImport } from './routes/files.route'
import { Route as DataRouteImport } from './routes/data.route'
import { Route as CodebaseRouteImport } from './routes/codebase.route'
import { Route as AuthRouteImport } from './routes/auth.route'
import { Route as IndexImport } from './routes/index'
import { Route as TeamsTeamIdAgentIdRouteImport } from './routes/teams.$teamId.$agentId.route'
import { Route as TeamsTeamIdAgentIdIndexImport } from './routes/teams.$teamId.$agentId.index'
import { Route as TeamsTeamIdAgentIdToolsRouteImport } from './routes/teams.$teamId.$agentId.tools.route'
import { Route as TeamsTeamIdAgentIdTasksRouteImport } from './routes/teams.$teamId.$agentId.tasks.route'
import { Route as TeamsTeamIdAgentIdMemoryRouteImport } from './routes/teams.$teamId.$agentId.memory.route'
import { Route as TeamsTeamIdAgentIdFlowsRouteImport } from './routes/teams.$teamId.$agentId.flows.route'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ServersRouteRoute = ServersRouteImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => rootRoute,
} as any)

const ProjectRouteRoute = ProjectRouteImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => rootRoute,
} as any)

const FilesRouteRoute = FilesRouteImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => rootRoute,
} as any)

const DataRouteRoute = DataRouteImport.update({
  id: '/data',
  path: '/data',
  getParentRoute: () => rootRoute,
} as any)

const CodebaseRouteRoute = CodebaseRouteImport.update({
  id: '/codebase',
  path: '/codebase',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TeamsTeamIdAgentIdRouteRoute = TeamsTeamIdAgentIdRouteImport.update({
  id: '/teams/$teamId/$agentId',
  path: '/teams/$teamId/$agentId',
  getParentRoute: () => rootRoute,
} as any)

const TeamsTeamIdAgentIdIndexRoute = TeamsTeamIdAgentIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TeamsTeamIdAgentIdRouteRoute,
} as any)

const TeamsTeamIdAgentIdToolsRouteRoute =
  TeamsTeamIdAgentIdToolsRouteImport.update({
    id: '/tools',
    path: '/tools',
    getParentRoute: () => TeamsTeamIdAgentIdRouteRoute,
  } as any)

const TeamsTeamIdAgentIdTasksRouteRoute =
  TeamsTeamIdAgentIdTasksRouteImport.update({
    id: '/tasks',
    path: '/tasks',
    getParentRoute: () => TeamsTeamIdAgentIdRouteRoute,
  } as any)

const TeamsTeamIdAgentIdMemoryRouteRoute =
  TeamsTeamIdAgentIdMemoryRouteImport.update({
    id: '/memory',
    path: '/memory',
    getParentRoute: () => TeamsTeamIdAgentIdRouteRoute,
  } as any)

const TeamsTeamIdAgentIdFlowsRouteRoute =
  TeamsTeamIdAgentIdFlowsRouteImport.update({
    id: '/flows',
    path: '/flows',
    getParentRoute: () => TeamsTeamIdAgentIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/codebase': {
      id: '/codebase'
      path: '/codebase'
      fullPath: '/codebase'
      preLoaderRoute: typeof CodebaseRouteImport
      parentRoute: typeof rootRoute
    }
    '/data': {
      id: '/data'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof DataRouteImport
      parentRoute: typeof rootRoute
    }
    '/files': {
      id: '/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesRouteImport
      parentRoute: typeof rootRoute
    }
    '/project': {
      id: '/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectRouteImport
      parentRoute: typeof rootRoute
    }
    '/servers': {
      id: '/servers'
      path: '/servers'
      fullPath: '/servers'
      preLoaderRoute: typeof ServersRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/$agentId': {
      id: '/teams/$teamId/$agentId'
      path: '/teams/$teamId/$agentId'
      fullPath: '/teams/$teamId/$agentId'
      preLoaderRoute: typeof TeamsTeamIdAgentIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/$agentId/flows': {
      id: '/teams/$teamId/$agentId/flows'
      path: '/flows'
      fullPath: '/teams/$teamId/$agentId/flows'
      preLoaderRoute: typeof TeamsTeamIdAgentIdFlowsRouteImport
      parentRoute: typeof TeamsTeamIdAgentIdRouteImport
    }
    '/teams/$teamId/$agentId/memory': {
      id: '/teams/$teamId/$agentId/memory'
      path: '/memory'
      fullPath: '/teams/$teamId/$agentId/memory'
      preLoaderRoute: typeof TeamsTeamIdAgentIdMemoryRouteImport
      parentRoute: typeof TeamsTeamIdAgentIdRouteImport
    }
    '/teams/$teamId/$agentId/tasks': {
      id: '/teams/$teamId/$agentId/tasks'
      path: '/tasks'
      fullPath: '/teams/$teamId/$agentId/tasks'
      preLoaderRoute: typeof TeamsTeamIdAgentIdTasksRouteImport
      parentRoute: typeof TeamsTeamIdAgentIdRouteImport
    }
    '/teams/$teamId/$agentId/tools': {
      id: '/teams/$teamId/$agentId/tools'
      path: '/tools'
      fullPath: '/teams/$teamId/$agentId/tools'
      preLoaderRoute: typeof TeamsTeamIdAgentIdToolsRouteImport
      parentRoute: typeof TeamsTeamIdAgentIdRouteImport
    }
    '/teams/$teamId/$agentId/': {
      id: '/teams/$teamId/$agentId/'
      path: '/'
      fullPath: '/teams/$teamId/$agentId/'
      preLoaderRoute: typeof TeamsTeamIdAgentIdIndexImport
      parentRoute: typeof TeamsTeamIdAgentIdRouteImport
    }
  }
}

// Create and export the route tree

interface TeamsTeamIdAgentIdRouteRouteChildren {
  TeamsTeamIdAgentIdFlowsRouteRoute: typeof TeamsTeamIdAgentIdFlowsRouteRoute
  TeamsTeamIdAgentIdMemoryRouteRoute: typeof TeamsTeamIdAgentIdMemoryRouteRoute
  TeamsTeamIdAgentIdTasksRouteRoute: typeof TeamsTeamIdAgentIdTasksRouteRoute
  TeamsTeamIdAgentIdToolsRouteRoute: typeof TeamsTeamIdAgentIdToolsRouteRoute
  TeamsTeamIdAgentIdIndexRoute: typeof TeamsTeamIdAgentIdIndexRoute
}

const TeamsTeamIdAgentIdRouteRouteChildren: TeamsTeamIdAgentIdRouteRouteChildren =
  {
    TeamsTeamIdAgentIdFlowsRouteRoute: TeamsTeamIdAgentIdFlowsRouteRoute,
    TeamsTeamIdAgentIdMemoryRouteRoute: TeamsTeamIdAgentIdMemoryRouteRoute,
    TeamsTeamIdAgentIdTasksRouteRoute: TeamsTeamIdAgentIdTasksRouteRoute,
    TeamsTeamIdAgentIdToolsRouteRoute: TeamsTeamIdAgentIdToolsRouteRoute,
    TeamsTeamIdAgentIdIndexRoute: TeamsTeamIdAgentIdIndexRoute,
  }

const TeamsTeamIdAgentIdRouteRouteWithChildren =
  TeamsTeamIdAgentIdRouteRoute._addFileChildren(
    TeamsTeamIdAgentIdRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRoute
  '/codebase': typeof CodebaseRouteRoute
  '/data': typeof DataRouteRoute
  '/files': typeof FilesRouteRoute
  '/project': typeof ProjectRouteRoute
  '/servers': typeof ServersRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/teams/$teamId/$agentId': typeof TeamsTeamIdAgentIdRouteRouteWithChildren
  '/teams/$teamId/$agentId/flows': typeof TeamsTeamIdAgentIdFlowsRouteRoute
  '/teams/$teamId/$agentId/memory': typeof TeamsTeamIdAgentIdMemoryRouteRoute
  '/teams/$teamId/$agentId/tasks': typeof TeamsTeamIdAgentIdTasksRouteRoute
  '/teams/$teamId/$agentId/tools': typeof TeamsTeamIdAgentIdToolsRouteRoute
  '/teams/$teamId/$agentId/': typeof TeamsTeamIdAgentIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRoute
  '/codebase': typeof CodebaseRouteRoute
  '/data': typeof DataRouteRoute
  '/files': typeof FilesRouteRoute
  '/project': typeof ProjectRouteRoute
  '/servers': typeof ServersRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/teams/$teamId/$agentId/flows': typeof TeamsTeamIdAgentIdFlowsRouteRoute
  '/teams/$teamId/$agentId/memory': typeof TeamsTeamIdAgentIdMemoryRouteRoute
  '/teams/$teamId/$agentId/tasks': typeof TeamsTeamIdAgentIdTasksRouteRoute
  '/teams/$teamId/$agentId/tools': typeof TeamsTeamIdAgentIdToolsRouteRoute
  '/teams/$teamId/$agentId': typeof TeamsTeamIdAgentIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRoute
  '/codebase': typeof CodebaseRouteRoute
  '/data': typeof DataRouteRoute
  '/files': typeof FilesRouteRoute
  '/project': typeof ProjectRouteRoute
  '/servers': typeof ServersRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/teams/$teamId/$agentId': typeof TeamsTeamIdAgentIdRouteRouteWithChildren
  '/teams/$teamId/$agentId/flows': typeof TeamsTeamIdAgentIdFlowsRouteRoute
  '/teams/$teamId/$agentId/memory': typeof TeamsTeamIdAgentIdMemoryRouteRoute
  '/teams/$teamId/$agentId/tasks': typeof TeamsTeamIdAgentIdTasksRouteRoute
  '/teams/$teamId/$agentId/tools': typeof TeamsTeamIdAgentIdToolsRouteRoute
  '/teams/$teamId/$agentId/': typeof TeamsTeamIdAgentIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/codebase'
    | '/data'
    | '/files'
    | '/project'
    | '/servers'
    | '/settings'
    | '/teams/$teamId/$agentId'
    | '/teams/$teamId/$agentId/flows'
    | '/teams/$teamId/$agentId/memory'
    | '/teams/$teamId/$agentId/tasks'
    | '/teams/$teamId/$agentId/tools'
    | '/teams/$teamId/$agentId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/codebase'
    | '/data'
    | '/files'
    | '/project'
    | '/servers'
    | '/settings'
    | '/teams/$teamId/$agentId/flows'
    | '/teams/$teamId/$agentId/memory'
    | '/teams/$teamId/$agentId/tasks'
    | '/teams/$teamId/$agentId/tools'
    | '/teams/$teamId/$agentId'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/codebase'
    | '/data'
    | '/files'
    | '/project'
    | '/servers'
    | '/settings'
    | '/teams/$teamId/$agentId'
    | '/teams/$teamId/$agentId/flows'
    | '/teams/$teamId/$agentId/memory'
    | '/teams/$teamId/$agentId/tasks'
    | '/teams/$teamId/$agentId/tools'
    | '/teams/$teamId/$agentId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRoute
  CodebaseRouteRoute: typeof CodebaseRouteRoute
  DataRouteRoute: typeof DataRouteRoute
  FilesRouteRoute: typeof FilesRouteRoute
  ProjectRouteRoute: typeof ProjectRouteRoute
  ServersRouteRoute: typeof ServersRouteRoute
  SettingsRouteRoute: typeof SettingsRouteRoute
  TeamsTeamIdAgentIdRouteRoute: typeof TeamsTeamIdAgentIdRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRoute,
  CodebaseRouteRoute: CodebaseRouteRoute,
  DataRouteRoute: DataRouteRoute,
  FilesRouteRoute: FilesRouteRoute,
  ProjectRouteRoute: ProjectRouteRoute,
  ServersRouteRoute: ServersRouteRoute,
  SettingsRouteRoute: SettingsRouteRoute,
  TeamsTeamIdAgentIdRouteRoute: TeamsTeamIdAgentIdRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/codebase",
        "/data",
        "/files",
        "/project",
        "/servers",
        "/settings",
        "/teams/$teamId/$agentId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.route.tsx"
    },
    "/codebase": {
      "filePath": "codebase.route.tsx"
    },
    "/data": {
      "filePath": "data.route.tsx"
    },
    "/files": {
      "filePath": "files.route.tsx"
    },
    "/project": {
      "filePath": "project.route.tsx"
    },
    "/servers": {
      "filePath": "servers.route.tsx"
    },
    "/settings": {
      "filePath": "settings.route.tsx"
    },
    "/teams/$teamId/$agentId": {
      "filePath": "teams.$teamId.$agentId.route.tsx",
      "children": [
        "/teams/$teamId/$agentId/flows",
        "/teams/$teamId/$agentId/memory",
        "/teams/$teamId/$agentId/tasks",
        "/teams/$teamId/$agentId/tools",
        "/teams/$teamId/$agentId/"
      ]
    },
    "/teams/$teamId/$agentId/flows": {
      "filePath": "teams.$teamId.$agentId.flows.route.tsx",
      "parent": "/teams/$teamId/$agentId"
    },
    "/teams/$teamId/$agentId/memory": {
      "filePath": "teams.$teamId.$agentId.memory.route.tsx",
      "parent": "/teams/$teamId/$agentId"
    },
    "/teams/$teamId/$agentId/tasks": {
      "filePath": "teams.$teamId.$agentId.tasks.route.tsx",
      "parent": "/teams/$teamId/$agentId"
    },
    "/teams/$teamId/$agentId/tools": {
      "filePath": "teams.$teamId.$agentId.tools.route.tsx",
      "parent": "/teams/$teamId/$agentId"
    },
    "/teams/$teamId/$agentId/": {
      "filePath": "teams.$teamId.$agentId.index.tsx",
      "parent": "/teams/$teamId/$agentId"
    }
  }
}
ROUTE_MANIFEST_END */
